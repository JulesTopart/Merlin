#version 430

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430) readonly buffer vertex_buffer {
    vec4[4] facets[];
};

layout(std430) writeonly buffer voxel_buffer {
    int voxelArray[];
};

uniform vec4 aabbMin;
uniform vec4 aabbMax;
uniform float voxelSize;
uniform uint facetCount = 0;
uniform uint voxelCount = 0;
uniform float surface_thickness = 0.0;
uniform mat4 modelMatrix; // Model transformation matrix

#define INTERSECT_EPSILON 1e-6
#define INTERSECT_MAX_DIST 1e6


float dot2( in vec3 v ) { return dot(v,v); }
float udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )
{
  vec3 ba = b - a; vec3 pa = p - a;
  vec3 cb = c - b; vec3 pb = p - b;
  vec3 ac = a - c; vec3 pc = p - c;
  vec3 nor = cross( ba, ac );

  return sqrt(
    (sign(dot(cross(ba,nor),pa)) +
     sign(dot(cross(cb,nor),pb)) +
     sign(dot(cross(ac,nor),pc))<2.0)
     ?
     min( min(
     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),
     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),
     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )
     :
     dot(nor,pa)*dot(nor,pa)/dot2(nor) );
}

bool IntersectTriangle(vec3 ro, vec3 rd, vec3 p0, vec3 p1, vec3 p2)
{
    const vec3 e0 = p1 - p0;
    const vec3 e1 = p0 - p2;
    vec3 triangleNormal = cross( e1, e0 );

    const vec3 e2 = ( 1.0 / dot( triangleNormal, rd ) ) * ( p0 - ro );
    const vec3 i  = cross( rd, e2 );
    vec3 barycentricCoord;
    barycentricCoord.y = dot( i, e1 );
    barycentricCoord.z = dot( i, e0 );
    barycentricCoord.x = 1.0 - (barycentricCoord.z + barycentricCoord.y);

   
    float hit   = dot( triangleNormal, e2 );

    
    return  (hit < INTERSECT_MAX_DIST) && (hit > INTERSECT_EPSILON) && all(greaterThanEqual(barycentricCoord, vec3(0.0)));
}

int raytrace(inout vec3 ro, vec3 rd){
    int hit = 0;
    for(uint i = 0; i < facetCount; i++){   //Loop for identify the facet intersected by the ray
        vec4[4] f = facets[i];
        //Intersection test, result : Facet id
        //Find the closest point of the geometry on the ray path
        
        vec3 a = vec3(modelMatrix * f[0]);
        vec3 b = vec3(modelMatrix * f[1]);
        vec3 c = vec3(modelMatrix * f[2]);
        
        if(surface_thickness > 0){
            if(udTriangle(ro, a, b, c) < surface_thickness)
                hit++ ;
        }else{
            if(IntersectTriangle( ro, rd, a, b, c))
                hit++;
        }

    }
    return hit;
}


uvec3 getVoxelCoordFromIndex(uint index) {
    const uvec3 gridSize = uvec3(ceil(vec3(aabbMax - aabbMin) / voxelSize));
	uint z = index / (gridSize.x * gridSize.y);
	index -= (z * gridSize.x * gridSize.y);
	uint y = index / gridSize.x;
	uint x = index % gridSize.x;
	return uvec3(x, y, z);
}

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

void main(){
    uint index = gl_GlobalInvocationID.x;
    if(index >= voxelCount) return;
    uvec3 index3D = getVoxelCoordFromIndex(index);
     const vec3 rd = vec3(1,0,0); //random vector
     vec3 ro = aabbMin.xyz + (vec3(index3D) + 0.5) * voxelSize;

     int hit = raytrace(ro, rd);
     if(hit==0 || hit % 2 != 1) hit = raytrace(ro, normalize(rd+vec3(1e-2)));

    if(surface_thickness > 0){
        if(hit == 0) voxelArray[index] = 0;
        else voxelArray[index] = 1;
    }else{
        if(hit == 0) voxelArray[index] = 0;
        else voxelArray[index] = hit % 2 == 1 ? 1 : 0;
    }

}
