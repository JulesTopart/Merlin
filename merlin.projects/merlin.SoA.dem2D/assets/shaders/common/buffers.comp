//? #version 430
#ifndef INCLUDE_BUFFERS_GLSL
#define INCLUDE_BUFFERS_GLSL

//Macro to access buffer
#define B_x(buffer_index) ssbo_position[buffer_index]
#define B_X(buffer_index) ssbo_pposition[buffer_index]
#define B_M(buffer_index) particleMass
#define B_V(buffer_index) ssbo_velocity[buffer_index]
#define B_T(buffer_index) ssbo_temperature[buffer_index]
#define B_Phase(buffer_index) ssbo_meta[buffer_index].x
#define B_BinIndex(buffer_index) ssbo_meta[buffer_index].y
#define B_ID(buffer_index) ssbo_meta[buffer_index].z
#define B_SortedID(buffer_index) ssbo_meta[buffer_index].w

//Shortcuts
#define xi B_x(i)
#define xj B_x(j)
#define Xi B_X(i)
#define Xj B_X(j)
#define Vi B_V(i)
#define Vj B_V(j)
#define Ti B_T(i)
#define Tj B_T(j)
#define Mi particleMass
#define Mj particleMass

#define Vij (Vj - Vi)
#define Rij (Xj - Xi)
#define Rji (Xi - Xj)
#define Dij distance(Xi, Xj)

layout(std430) buffer PositionBuffer {
	vec2 ssbo_position[];
};
layout(std430) buffer cpyPositionBuffer {
	vec2 ssbo_cpy_position[];
};

layout(std430) buffer PredictedPositionBuffer {
	vec2 ssbo_pposition[];
};
layout(std430) buffer cpyPredictedPositionBuffer {
	vec2 ssbo_cpy_pposition[];
};

layout(std430) buffer VelocityBuffer {
	vec2 ssbo_velocity[];
};
layout(std430) buffer cpyVelocityBuffer {
	vec2 ssbo_cpy_velocity[];
};

layout(std430) buffer TemperatureBuffer {
	float ssbo_temperature[];
};
layout(std430) buffer cpyTemperatureBuffer {
	float ssbo_cpy_temperature[];
};

layout(std430) buffer MetaBuffer {
	uvec4 ssbo_meta[]; //phase, binindex, id , sortedID
};

layout(std430) buffer cpyMetaBuffer {
	uvec4 ssbo_cpy_meta[]; //phase, binindex, id , sortedID
};

#endif// INCLUDE_BUFFERS_HLSL