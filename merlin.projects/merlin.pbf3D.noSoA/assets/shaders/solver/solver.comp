#version 430

#pragma once
#include "../common/uniforms.comp"
#include "../common/constants.comp"
#include "../common/buffers.comp"
#include "../common/colors.comp"
#include "../common/nns.comp"
#include "sph.kernels.comp" 
#include "constraint.comp" 


layout (local_size_x = PTHREAD) in;
void SolveFluid(uint i, uint simStep);
void NNS(uint i, uint simStep);

uniform uint stage;
uniform vec4 sourcePos;
// XPBD_Main
void main() {
	uint i = gl_GlobalInvocationID.x;
	if (i >= numParticles) return;
	NNS(i, stage);
	if(particles[i].phase != BOUNDARY)	SolveFluid(i, stage);
}

void NNS(uint i, uint simStep){
	if(simStep == 0){ //Bin sorting
		particles[i].binIndex = getBinIndex(Xi);
		atomicAdd(bins[particles[i].binIndex].count, 1);
		cpy_particles[i] = particles[i];
		return;
	}
	if(simStep == 1){//Sort particle indices
		uint newID = atomicAdd(bins[cpy_particles[i].binIndex].index, -1) -1;
		particles[newID] = cpy_particles[i];
		sortedIndices[particles[newID].id] = newID;
		return;
	}
}

void SolveFluid(uint i, uint simStep) {
	
	if(simStep == 2){
		vec3 acceleration = vec3(0, 0, -g);
		Vi += acceleration * dt;
		Xi = xi + Vi * dt;
		return;
	}

		
	if(simStep == 3){ //compute lagrange multiplier
		Lambi = computeLambda(i);
		return;
	}
		
	if(simStep == 4){//correct density error and update position
		Xi += computePositionDelta(i);
		Xi += solveFloorCollision(i);
		//particles[i].pposition = clampToDomain(particles[i].pposition);
		return;
	}
	if(simStep == 5){//apply XSPH velocity correction
		Vi = (Xi - xi)/dt;

		vec3 xsphSum = vec3(0);

		vec3 position = Xi;
		OVERNNS
			vec3 dist = Rji;
			float Wij = poly6(length(dist));
			xsphSum -= artificialViscosityMultiplier * Vij * Wij * Rhoj;
		OVERNNS_END
		Vi -= xsphSum;

		xi = Xi;
		return;
	}

}

