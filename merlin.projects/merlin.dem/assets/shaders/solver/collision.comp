//? #version 430
#ifndef INCLUDE_COLLISION_GLSL
#define INCLUDE_COLLISION_GLSL



#include "../common/buffers.comp"

/*
case 6 :
	vec4 deltaPosition = particles[i].new_position - particles[i].position;
	if(!stabilizationPass) particles[i].velocity = (deltaPosition)/dt;

	if(length(deltaPosition) > 1e-03) //particle sleeping
	particles[i].position = particles[i].new_position;
	particles[i].temperature = particles[i].new_temperature;

	particles[i].acceleration = vec4(0,0,-G,0);
	//particles[i].acceleration += particles[i].velocity * -0.0001*length(particles[i].velocity); //AirFriction
	particles[i].mass = particleMass;
	particles[i].new_position = particles[i].position + deltaPosition + particles[i].acceleration*dt*dt;
break;
*/



vec4 sdfPlane(vec4 p, vec4 normal, float h){
	return dot(p,normal) + h;
}

vec4 solvePlaneCollision(vec4 x, vec4 normal, float h){
	float dist = sdfPlane(x, normal, h);
    if (dist - n.radius <= 0) {
      vec4 maxPos = x - normal*dist;
      x = maxPos;
    }
	return x;
}

vec4 solveBoundaryCollision(uint i){
	vec4 x = particles[i].new_position;
	x = solvePlaneCollision(x, vec4(1,0,0), boundaryMin[0]);
	x = solvePlaneCollision(x, vec4(1,0,0), boundaryMin[0]);

	x = solvePlaneCollision(x, vec4(1,0,0), boundaryMin[0]);
	x = solvePlaneCollision(x, vec4(1,0,0), boundaryMin[0]);

	x = solvePlaneCollision(x, vec4(1,0,0), boundaryMin[0]);
	x = solvePlaneCollision(x, vec4(1,0,0), boundaryMin[0]);
	
	return (x - particles[i].new_position);
}

#endif