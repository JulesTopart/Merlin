#version 430

#pragma once
#include "../common/uniforms.comp"
#include "../common/constants.comp"
#include "../common/buffers.comp"
#include "../common/colors.comp"
#include "../common/nns.comp"
#include "sph.kernels.comp" 
#include "constraint.comp" 


layout (local_size_x = PTHREAD) in;
void SolveFluid(uint i, uint simStep);
void NNS(uint i, uint simStep);

uniform uint stage;
uniform vec4 sourcePos;
// XPBD_Main
void main() {
	uint i = gl_GlobalInvocationID.x;
	if (i >= numParticles) return;
	NNS(i, stage);
	if(B_Phase(i) != BOUNDARY)	SolveFluid(i, stage);
}

void NNS(uint i, uint simStep){
	if(simStep == 0){ //Bin sorting
		uint bin = B_BinIndex(i) = getBinIndex(Xi);
		atomicAdd(bins[bin].count, 1);
		ssbo_cpy_position[i] = ssbo_position[i];
		ssbo_cpy_velocity[i] = ssbo_velocity[i];
		ssbo_cpy_density[i] = ssbo_density[i];
		ssbo_cpy_pressure[i] = ssbo_pressure[i];
		ssbo_cpy_meta[i] = ssbo_meta[i];

		return;
	}else if(simStep == 1){//Sort particle indices
		uint newID = atomicAdd(bins[ssbo_cpy_meta[i].y].index, -1) -1;

		ssbo_position[newID]  = ssbo_cpy_position[i];
		ssbo_velocity[newID]  = ssbo_cpy_velocity[i];
		ssbo_density[newID]   = ssbo_cpy_density[i];
		ssbo_pressure[newID]    = ssbo_cpy_pressure[i];
		ssbo_meta[newID]      = ssbo_cpy_meta[i];

		ssbo_meta[ssbo_meta[newID].z].z = newID;
		return;
	}
}

//Simple Sympletic Euler integration with WSPH example
void SolveFluid(uint i, uint simStep) {
	if(simStep == 2){
		computeDensityPressure(i);
		return;
	}else if(simStep == 3){
		float rhoi = Rhoi;
		vec2 fpress = vec2(0);
		vec2 fvisc = vec2(0);
		vec2 fgrav = vec2(0,-g) * particleMass / rhoi;
		vec2 position = Xi;

		OVERNNS
			vec2 rij = Rij;
			if(length(rij) >= H || length(rij) <= 1e-6) continue;
			if(i != j){
				fpress += -normalize(rij) * particleMass * (Pi + Pj) / (2.0f * Rhoj) * spiky(rij);
				fvisc += artificialViscosityMultiplier * particleMass * Vij / Rhoj * viscosityLaplacianKernel(rij);
			}
		OVERNNS_END

		Vi += dt * (fpress + fgrav + fvisc)/rhoi;
		vec2 xi = Xi;
		Xi += dt * Vi;

		Vi += solveFloorCollision(i)/dt;
		Xi += solveFloorCollision(i);
		

		return;
	}else if(simStep == 4){
		vec2 xsphSum = vec2(0);

		vec2 position = Xi;
		OVERNNS
			if(length(Rji) < 1e-6 || i == j) continue;
			float Wij = poly6(Rji);
			xsphSum -=0.01 * Vij * Wij * Rhoj;
		OVERNNS_END
		Vi -= xsphSum;

		return;
	}

}

