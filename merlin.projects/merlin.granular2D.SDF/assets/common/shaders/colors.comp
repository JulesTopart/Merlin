//This file was automatically generated 
//DO NOT CHANGE !

//? #version 430
#ifndef INCLUDE_COLORS_GLSL
#define INCLUDE_COLORS_GLSL

#define LAMBDA_FIELD 0
#define DENSITY_FIELD 1
#define TEMPERATURE_FIELD 2
#define VELOCITY_FIELD 3
#define MAX_FIELD 3

#define NEAR 0.1
#define FAR  90.0

struct Palette {
	uint colorCount;
	vec4[16] colors;
};

const Palette inferno = Palette(16, vec4[16](vec4(0 / 255.0, 0 / 255.0,4 / 255.0,0),vec4(12 / 255.0, 8 / 255.0,38 / 255.0,0.06666666),vec4(36 / 255.0, 12 / 255.0,79 / 255.0,0.13333333),vec4(66 / 255.0, 10 / 255.0,104 / 255.0,0.2),vec4(93 / 255.0, 18 / 255.0,110 / 255.0,0.26666666),vec4(120 / 255.0, 28 / 255.0,109 / 255.0,0.33333333),vec4(147 / 255.0, 38 / 255.0,103 / 255.0,0.4),vec4(174 / 255.0, 48 / 255.0,92 / 255.0,0.46666666),vec4(199 / 255.0, 62 / 255.0,76 / 255.0,0.53333333),vec4(221 / 255.0, 81 / 255.0,58 / 255.0,0.6),vec4(237 / 255.0, 105 / 255.0,37 / 255.0,0.66666666),vec4(248 / 255.0, 133 / 255.0,15 / 255.0,0.73333333),vec4(252 / 255.0, 165 / 255.0,10 / 255.0,0.8),vec4(250 / 255.0, 198 / 255.0,45 / 255.0,0.86666666),vec4(242 / 255.0, 230 / 255.0,97 / 255.0,0.93333333),vec4(252 / 255.0, 255 / 255.0,164 / 255.0,1)));
const Palette blackbody = Palette(16, vec4[16](vec4(0 / 255.0, 0 / 255.0,0 / 255.0,0),vec4(36 / 255.0, 15 / 255.0,9 / 255.0,0.0666666666666666),vec4(62 / 255.0, 22 / 255.0,17 / 255.0,0.133333333333333),vec4(90 / 255.0, 27 / 255.0,22 / 255.0,0.2),vec4(119 / 255.0, 30 / 255.0,26 / 255.0,0.266666666666666),vec4(150 / 255.0, 33 / 255.0,30 / 255.0,0.333333333333333),vec4(180 / 255.0, 38 / 255.0,34 / 255.0,0.4),vec4(197 / 255.0, 65 / 255.0,28 / 255.0,0.466666666666666),vec4(214 / 255.0, 88 / 255.0,19 / 255.0,0.533333333333333),vec4(228 / 255.0, 112 / 255.0,7 / 255.0,0.6),vec4(231 / 255.0, 141 / 255.0,18 / 255.0,0.666666666666666),vec4(233 / 255.0, 169 / 255.0,29 / 255.0,0.733333333333333),vec4(233 / 255.0, 195 / 255.0,39 / 255.0,0.8),vec4(231 / 255.0, 222 / 255.0,50 / 255.0,0.866666666666666),vec4(246 / 255.0, 240 / 255.0,144 / 255.0,0.933333333333333),vec4(255 / 255.0, 255 / 255.0,255 / 255.0,1)));
const Palette plasma = Palette(16, vec4[16](vec4(13 / 255.0, 8 / 255.0,135 / 255.0,0),vec4(51 / 255.0, 5 / 255.0,151 / 255.0,0.0666666666666666),vec4(80 / 255.0, 2 / 255.0,162 / 255.0,0.133333333333333),vec4(106 / 255.0, 0 / 255.0,168 / 255.0,0.2),vec4(132 / 255.0, 5 / 255.0,167 / 255.0,0.266666666666666),vec4(156 / 255.0, 23 / 255.0,158 / 255.0,0.333333333333333),vec4(177 / 255.0, 42 / 255.0,144 / 255.0,0.4),vec4(195 / 255.0, 61 / 255.0,128 / 255.0,0.466666666666666),vec4(211 / 255.0, 81 / 255.0,113 / 255.0,0.533333333333333),vec4(225 / 255.0, 100 / 255.0,98 / 255.0,0.6),vec4(237 / 255.0, 121 / 255.0,83 / 255.0,0.666666666666666),vec4(246 / 255.0, 143 / 255.0,68 / 255.0,0.733333333333333),vec4(252 / 255.0, 166 / 255.0,54 / 255.0,0.8),vec4(254 / 255.0, 192 / 255.0,41 / 255.0,0.866666666666666),vec4(249 / 255.0, 220 / 255.0,36 / 255.0,0.933333333333333),vec4(240 / 255.0, 249 / 255.0,33 / 255.0,1)));
const Palette viridis = Palette(16, vec4[16](vec4(68 / 255.0, 1 / 255.0,84 / 255.0,0),vec4(72 / 255.0, 26 / 255.0,108 / 255.0,0.0666666666666666),vec4(71 / 255.0, 47 / 255.0,125 / 255.0,0.133333333333333),vec4(65 / 255.0, 68 / 255.0,135 / 255.0,0.2),vec4(57 / 255.0, 86 / 255.0,140 / 255.0,0.266666666666666),vec4(49 / 255.0, 104 / 255.0,142 / 255.0,0.333333333333333),vec4(42 / 255.0, 120 / 255.0,142 / 255.0,0.4),vec4(35 / 255.0, 136 / 255.0,142 / 255.0,0.466666666666666),vec4(31 / 255.0, 152 / 255.0,139 / 255.0,0.533333333333333),vec4(34 / 255.0, 168 / 255.0,132 / 255.0,0.6),vec4(53 / 255.0, 183 / 255.0,121 / 255.0,0.666666666666666),vec4(84 / 255.0, 197 / 255.0,104 / 255.0,0.733333333333333),vec4(122 / 255.0, 209 / 255.0,81 / 255.0,0.8),vec4(165 / 255.0, 219 / 255.0,54 / 255.0,0.866666666666666),vec4(210 / 255.0, 226 / 255.0,27 / 255.0,0.933333333333333),vec4(253 / 255.0, 231 / 255.0,37 / 255.0,1)));
const Palette warmcool = Palette(16, vec4[16](vec4(0.229999503869523, 0.298998934049375,0.754000138575591,0),vec4(0.309262828634354 , 0.413817415026243 ,0.850646530522937 ,0.0666666666666666),vec4(0.394257372121458 , 0.522816241174981,0.925619195823635,0.133333333333333),vec4(0.484114290291382 , 0.622545393982025 ,0.975617124851209,0.2),vec4(0.57636888477919 , 0.70933147012794 ,0.998554736607497 ,0.266666666666666),vec4(0.667602712206112 , 0.77970678946352 ,0.993625576141458 ,0.333333333333333),vec4(0.753922329420233 , 0.830635265822307 ,0.961295108182006 ,0.4),vec4(0.831310206532838 , 0.859666887253979 ,0.903222618218773 ,0.466666666666666),vec4(0.899790366154808 , 0.847656082884652 ,0.817827244567743 ,0.533333333333333),vec4(0.947925858640541 , 0.795101724363689 ,0.717097358491085 ,0.6),vec4(0.968998398592707 , 0.721381488984381 ,0.612361864520328 ,0.666666666666666),vec4(0.963589081816417 , 0.628790244892546 ,0.507610242858806 ,0.733333333333333),vec4(0.932695912765446 , 0.519640934448169 ,0.406346083160873 ,0.8),vec4(0.877889762924204 , 0.39520169428451 ,0.311503983899383 ,0.866666666666666),vec4(0.801376829514291 , 0.251536611469235 ,0.225435621347621 ,0.933333333333333),vec4(0.706000135911704 , 0.0159918240339806 ,0.1500000719222 ,1)));
const Palette parula = Palette(9, vec4[16](vec4(53 / 255.0, 42 / 255.0, 135 / 255.0, 0.0), vec4(3 / 255.0, 99 / 255.0, 225 / 255.0, 0.125), vec4(20 / 255.0, 133 / 255.0, 212 / 255.0, 0.25), vec4(6 / 255.0, 167 / 255.0, 198 / 255.0, 0.375), vec4(56 / 255.0, 185 / 255.0, 158 / 255.0, 0.5), vec4(146 / 255.0, 191 / 255.0, 115 / 255.0, 0.625), vec4(217 / 255.0, 186 / 255.0, 86 / 255.0, 0.75), vec4(252 / 255.0, 206 / 255.0, 46 / 255.0, 0.875), vec4(249 / 255.0, 251 / 255.0, 14 / 255.0, 1.0), vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0)));
const Palette jet = Palette(5, vec4[16](vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 1.0, 0.25), vec4(0.0, 1.0, 0.0, 0.5), vec4(1.0, 1.0, 0.0, 0.75), vec4(1.0, 0.0, 0.0, 1.0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0)));

float map(float value, float min1, float max1) {
  const float min2 = 0.0; const float max2 = 1.0;
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

vec4 colorMap(const float value, const Palette pal) {
	float minValue = 0.0f;
	float maxValue = 1.0f;
	float v = (value - minValue) / (maxValue - minValue);
	vec4 color;
	color.a = 1.0f;
	if (pal.colorCount == 0) return vec4(0,0,0,1);

	for (int i = 0; i < pal.colorCount; i++) {
		vec4 currC = pal.colors[i];
		if (v <= currC.w) {
			vec4 prevC = pal.colors[max(0, i - 1)];
			float valueDiff = (prevC.w - currC.w);
			float fractBetween = (valueDiff == 0) ? 0 : (v - currC.w) / valueDiff;
			color.r = (prevC.r - currC.r) * fractBetween + currC.r;
			color.g = (prevC.g - currC.g) * fractBetween + currC.g;
			color.b = (prevC.b - currC.b) * fractBetween + currC.b;
			return color;
		}
	}
	color = vec4(pal.colors[pal.colorCount - 1].rgb, 1.0);
	return color;
}

vec3 hsv2rgb(vec3 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float rand(vec2 co){
    return 0.00001*abs(fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453));
}

vec3 randomColor(uint index){
	float v = float(index)/500.0;
	vec2 co = vec2(v, v*v);
	return vec3(0.2) + normalize(vec3(rand(co*0.8738), rand(co*0.321313), rand(0.12354*co)));
}

float LinearizeDepth(float depth) {
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * NEAR * FAR) / (FAR + NEAR - z * (FAR - NEAR));	
}

#endif