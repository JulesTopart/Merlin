#version 430

#pragma once
#include "../common/uniforms.comp"
#include "../common/constants.comp"
#include "../common/buffers.comp"
#include "../common/colors.comp"
#include "../common/nns.comp"
#include "sph.kernels.comp" 
#include "nozzleSDF.comp" 
#include "constraint.comp" 


layout (local_size_x = PTHREAD) in;
void SolveDEM(uint i, uint simStep);
void NNS(uint i, uint simStep);

uniform uint stage;
uniform float drumSpeed = 10;
// XPBD_Main
void main() {
	uint i = gl_GlobalInvocationID.x;
	if (i >= numParticles) return;
	NNS(i, stage);
	if(B_Phase(i) != BOUNDARY)	SolveDEM(i, stage);
}

void NNS(uint i, uint simStep){
	if(simStep == 0){ //Bin sorting
		uint bin = B_BinIndex(i) = getBinIndex(Xi);
		atomicAdd(bins[bin].count, 1);
		ssbo_cpy_position[i] = ssbo_position[i];
		ssbo_cpy_pposition[i] = ssbo_pposition[i];
		ssbo_cpy_velocity[i] = ssbo_velocity[i];
		ssbo_cpy_temperature[i] = ssbo_temperature[i];
		ssbo_cpy_meta[i] = ssbo_meta[i];

		return;
	}else if(simStep == 1){//Sort particle indices
		uint newID = atomicAdd(bins[ssbo_cpy_meta[i].y].index, -1) -1;

		ssbo_position[newID]  = ssbo_cpy_position[i];
		ssbo_pposition[newID] = ssbo_cpy_pposition[i];
		ssbo_velocity[newID]  = ssbo_cpy_velocity[i];
		ssbo_temperature[newID]   = ssbo_cpy_temperature[i];
		ssbo_meta[newID]      = ssbo_cpy_meta[i];

		ssbo_meta[ssbo_meta[newID].z].z = newID;
		return;
	}
}



void SolveDEM(uint i, uint simStep) {
	
	if(simStep == 2){
		vec2 acceleration = vec2(0,-g);
		Xi = xi + Vi * dt;
		if(length(Xi - xi) < 0.0001) Xi = xi; //particle sleeping
		Xi += acceleration * dt * dt;

		return;
	}else if(simStep == 3){
		Xi += solveParticleCollision(i);

		return;
	}else if(simStep == 4){
		
		Ti += computeTemperatureDelta(i)*dt;
		Xi += solveFloorCollision(i);

		float dist = nozzleSDF(Xi) ;
		if(dist <= -particleRadius){
		    const float eps = 0.0001; // or some other value
			const vec2 h = vec2(eps,0);
			vec2 p = Xi;
			vec2 normal = normalize( vec2(nozzleSDF(Xi+h.xy) - nozzleSDF(Xi-h.xy), nozzleSDF(Xi+h.yx) - nozzleSDF(Xi-h.yx) ) );
			Xi -= normal * min(((dist-particleRadius)), 0.0)/50;
			Ti += 0.04*(500 - Ti)*dt;
		}

		vec2 position = Xi;
		vec2 xT = vec2(0);
		OVERNNS
			if(length(Rji) < 1e-6 || length(Rji) > particleRadius*1.1 || i == j) continue;
			vec2 tang = normalize(Xj - Xi);
			vec2 norm = cross(vec3(tang, 0.0), vec3(0,0,1)).xy;
			xT += 1.0 * norm * dot((Xi - xi) - (Xj - xj), norm);
		OVERNNS_END
		Xi -= xT;
		
		if(Xi.y < boundaryMin.y + particleRadius*1.2){
			Xi.x -= (Xi.x - xi.x)*0.8;
		}


		return;
	}else if(simStep == 5){
		Vi = 0.998*(Xi - xi)/dt;
		xi = Xi;
		return;
	}

}



