#version 430

#pragma once
#include "../common/uniforms.comp"
#include "../common/constants.comp"
#include "../common/buffers.comp"
#include "../common/colors.comp"
#include "../common/nns.comp"
#include "sph.kernels.comp" 
#include "constraint.comp" 


layout (local_size_x = PTHREAD) in;
void SolveFluid(uint i, uint simStep);
void NNS(uint i, uint simStep);

uniform bool whirlpool = false;
uniform uint stage;
uniform vec4 sourcePos;
// XPBD_Main
void main() {
	uint i = gl_GlobalInvocationID.x;
	if (i >= numParticles) return;
	NNS(i, stage);
	if(B_Phase(i) != BOUNDARY)	SolveFluid(i, stage);
}

void NNS(uint i, uint simStep){
	if(simStep == 0){ //Bin sorting
		uint bin = B_BinIndex(i) = getBinIndex(Xi);
		atomicAdd(bins[bin].count, 1);
		ssbo_cpy_position[i] = ssbo_position[i];
		ssbo_cpy_pposition[i] = ssbo_pposition[i];
		ssbo_cpy_velocity[i] = ssbo_velocity[i];
		ssbo_cpy_density[i] = ssbo_density[i];
		ssbo_cpy_lambda[i] = ssbo_lambda[i];
		ssbo_cpy_meta[i] = ssbo_meta[i];

		return;
	}else if(simStep == 1){//Sort particle indices
		uint newID = atomicAdd(bins[ssbo_cpy_meta[i].y].index, -1) -1;

		ssbo_position[newID]  = ssbo_cpy_position[i];
		ssbo_pposition[newID] = ssbo_cpy_pposition[i];
		ssbo_velocity[newID]  = ssbo_cpy_velocity[i];
		ssbo_density[newID]   = ssbo_cpy_density[i];
		ssbo_lambda[newID]    = ssbo_cpy_lambda[i];
		ssbo_meta[newID]      = ssbo_cpy_meta[i];

		ssbo_meta[ssbo_meta[newID].z].z = newID;
		return;
	}
}

void SolveFluid(uint i, uint simStep) {
	
	if(simStep == 2){
		vec3 acceleration = vec3(0, 0, -g);
		Vi += acceleration * dt;
		Xi = xi + Vi * dt;
		return;
	}

		
	if(simStep == 3){ //compute lagrange multiplier
		B_Lambda(i) = computeLambda(i);
		return;
	}
		
	if(simStep == 4){//correct density error and update position
		Xi += computePositionDelta(i);
		Xi += solveFloorCollision(i);
		//particles[i].pposition = clampToDomain(particles[i].pposition);
		return;
	}
	if(simStep == 5){//apply XSPH velocity correction
		if(isnan(Xi.x) || isnan(Xi.y) || isnan(Xi.z)) Xi = xi;
		Vi = (Xi - xi)/dt;

		if(whirlpool){
		float radius = distance(Xi.xy, vec2(0,0));
		if(radius < 80){
			vec3 pos = normalize(vec3(Xi.xy,0));
			float wi = 500;
			vec3 Vdir = normalize(cross(pos, vec3(0,0,1)));
			Vi += wi * radius  * Vdir * dt;
		}}

		vec3 xsphSum = vec3(0);

		vec3 position = Xi;
		OVERNNS
			if(j == i) continue;
			float dist = Dij;
			if(dist < 1e-6) continue;
			float Wij = poly6(dist);
			xsphSum -= artificialViscosityMultiplier * Vij * Wij * Rhoj;
		OVERNNS_END
		Vi -= xsphSum;

		xi = Xi;
		return;
	}

}

